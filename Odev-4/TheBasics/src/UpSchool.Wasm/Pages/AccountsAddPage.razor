@page "/accounts/add/{ConnectionId}"
@using UpSchool.Domain.Dtos
@using UpSchool.Domain.Services
@using UpSchool.Domain.Utilities
@inject NavigationManager NavigationManager
@inject IToasterService ToasterService
@inject HttpClient HttpClient

<div class="card">
    <div class="card-header text-center">
        <div class="d-flex justify-content-center align-items-center">
            <img src="svgs/plus.svg" class="me-2"/> <h2>Add a New Account</h2>
        </div>
    </div>
    
    <div class="card-body">
        <EditForm Model="@addDto" OnValidSubmit=@SendForm>
    
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="title" class="form-label">Title</label>
                <InputText class="form-control" id="title" @bind-Value="@addDto.Title"/>
                <ValidationMessage For="@(() => addDto.Title)" />
            </div>

            <div class="mb-3">
                <label for="userName" class="form-label">UserName</label>
                <InputText class="form-control" id="userName" @bind-Value="@addDto.UserName"/>
                <ValidationMessage For="@(() => addDto.UserName)" />
            </div>
    
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText class="form-control" id="password" @bind-Value="@addDto.Password" />
                <ValidationMessage For="@(() => addDto.Password)" />
            </div>
    
            <div class="mb-3">
                <label for="url" class="form-label">Url</label>
                <InputText class="form-control" id="url" @bind-Value="@addDto.Url" />
                <ValidationMessage For="@(() => addDto.Url)" />
            </div>
    
            <div class="mb-3 form-check">
                <InputCheckbox class="form-check-input" id="isFavourite" @bind-Value="@addDto.IsFavourite"/>
                <label class="form-check-label" for="isFavourite">Is Favourite?</label>
                <ValidationMessage For="@(() => addDto.IsFavourite)" />
            </div>
            
            <div class="mb-3 d-flex justify-content-between">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-danger" @onclick=@OnCancel>Cancel</button>
                <button type="button" class="btn btn-secondary" @onclick=@OnGoBack>Go Back</button>
            </div>

        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string ConnectionId { get; set; }

    private AccountAddDto addDto = new AccountAddDto();

    private void OnCancel()
    {
        addDto = new AccountAddDto();
    }

    private void OnGoBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task SendForm()
    {
        addDto.Password = StringHelper.Base64Encode(addDto.Password);

        addDto.ConnectionId = ConnectionId;

        var response = await HttpClient.PostAsJsonAsync("Accounts", addDto);

        if (response.IsSuccessStatusCode)
        {
            var accountDto = await response.Content.ReadFromJsonAsync<AccountDto>();

            ToasterService.ShowSuccess($"The account titled \"{accountDto.Title}\" was successfully added.");

            NavigationManager.NavigateTo("/");

            return;
        }

        ToasterService.ShowError("An unexpected error occurred.");

        return;
    }
}
