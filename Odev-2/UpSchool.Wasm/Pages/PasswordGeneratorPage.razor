@page "/passwordGenerator"
@page "/passwordGenerator/{PasswordLength:int}"
@page "/passwordGenerator/{PasswordLength:int}/{UserName}"

@using UpSchool.Domain.Dtos
@using UpSchool.Domain.Utilities
@using UpSchool.Wasm.Common.Utilities;
@using UpSchool.Wasm.Components;
@using UpSchool.Domain.Pattern.MementoPattern;
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage



<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3 shadow p-3 mb-5 bg-light bg-opacity-10 rounded">


                <div class="card-header" id="generatortitle" style="width: 100%; overflow: hidden; will-change: transform"</div>

                <div class="card-footer">
                    <div class="row justify-content-end">
                        <div class="col-md-1">
                            <span @onclick=@Undo class="oi oi-action-undo  @(passwordsforundo.Count >= 2 ? "clickable" : "notclickable")" aria-hidden="true"></span>
                            <!--<span @onclick="@(() => UndoPasswordMemento())" class="oi oi-action-undo clickable" aria-hidden="true"></span>-->
                            
                        </div>

                        <div class="col-md-1">
                            <span @onclick=@Redo class="oi oi-action-redo  @(passwordsforredo.Count >= 2 ? "clickable" : "notclickable")" aria-hidden="true"></span>
                           
                        </div>

                        <div class="col-md-1">
                            <span @onclick="@(()=> SavedPasswordAsync())" class="oi oi-clipboard clickable" aria-hidden="true" ></span>
                        </div>
                        <div class="col-md-1">
                            <span @onclick="@(() => CopyToClipboardAsync())" class="oi oi-document clickable" aria-hidden="true" ></span>
                        </div>
                        <div class="col-md-1">
                            <span @onclick=@GeneratePassword class="oi oi-loop-circular clickable" aria-hidden="true"></span>
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div class="row">
                        <div class="col-md-9">
                            <p style="color:#d5b790">@password</p>
                        </div>


                    </div>
                </div>

                <div class="card-footer">
                    <hr class=@CssColourClass style="height: 2vh !important;" />
                </div>
                <div class="card-footer">
                    <div class="mt-2 text-center">
                        <label style="color:#d5b790">
                            Password Length <span class="@($"badge {CssColourClass}")">@generatePasswordDto.Length</span>
                        </label>

                        <input class="form-range" type="range"
                               value="@generatePasswordDto.Length" @oninput=@OnInputChange min="6" max="40" step="1" />
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeNumbers"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "numbers"))" id="numbers" />
                        <label class="form-check-label" style="color:#d5b790" for="numbers">Numbers</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeLowercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "lowercaseChars"))" id="lowercaseChars" />
                        <label class="form-check-label" style="color:#d5b790" for="lowercaseChars">Lowercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeUppercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "uppercaseChars"))" id="uppercaseChars" />
                        <label class="form-check-label" style="color:#d5b790" for="uppercaseChars">Uppercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeSpecialCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "specialChars"))" id="specialChars" />
                        <label class="form-check-label" style="color:#d5b790" for="specialChars">Special Chars</label>
                    </div>
                </div>
            </div>
        </div>

    </div>



    <SavedPasswordsCard savedPasswords="@savedPasswords" OnCopyToClipboardAsync="CopyToClipboardAsync" OnClearSavedPasswords="ClearSavedPasswords" />

</div>


@code
{
    [Parameter]
    public int? PasswordLength { get; set; }

    [Parameter]
    public string? UserName { get; set; }

    public PasswordGenerator passwordGenerator = new PasswordGenerator();

    public GeneratePasswordDto generatePasswordDto = new GeneratePasswordDto();

    public string password = string.Empty;

    public string CssColourClass = "bg-danger";

    private List<string> savedPasswords;

    //Originator originator = new Originator("password");
    //Caretaker caretaker = new Caretaker(originator);


    public string lastPassword = string.Empty;
    public List<string> passwordsforundo;
    public List<string> passwordsforredo;


    protected override async Task OnInitializedAsync()
    {
        savedPasswords = new List<string>();
        passwordsforundo = new List<string>();
        passwordsforredo = new List<string>();

        if (PasswordLength.HasValue) generatePasswordDto.Length = PasswordLength.Value;

        GeneratePassword();

        var localStoragePasswords = await LocalStorage.GetItemAsync<List<string>>("savedPasswords");

        if (localStoragePasswords is not null) savedPasswords = localStoragePasswords;


        await base.OnInitializedAsync();
    }


    private ValueTask SavedPasswordAsync()
    {

        ToastService.ShowSuccess("The selected password was succesfully saved");

        if (savedPasswords.Any(x => x == password)) return ValueTask.CompletedTask;

        savedPasswords.Add(password);

        return LocalStorage.SetItemAsync("savedPasswords", savedPasswords);
    }



    private void GeneratePassword()
    {

        password = passwordGenerator.Generate(generatePasswordDto);

        CssColourClass = CssUtilities.GetCssColourClassForPasswords(password.Length);

        passwordsforundo.Add(password);

        passwordsforredo.Clear();

    }

    private async Task CopyToClipboardAsync()
    {
        ToastService.ShowSuccess("The selected password was copied to the clipboard.");

        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password);
    }

    private void CheckboxOnChange(ChangeEventArgs args, string checkBoxName)
    {
        switch (checkBoxName)
        {
            case "numbers":
                generatePasswordDto.IncludeNumbers = Convert.ToBoolean(args.Value);
                break;

            case "lowercaseChars":
                generatePasswordDto.IncludeLowercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "uppercaseChars":
                generatePasswordDto.IncludeUppercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "specialChars":
                generatePasswordDto.IncludeSpecialCharacters = Convert.ToBoolean(args.Value);
                break;

            default:
                throw new Exception("Beklenmedik bir Checkbox adÄ± geldi.");
                break;

        }

        password = passwordGenerator.Generate(generatePasswordDto);
        passwordsforundo.Add(password);
        passwordsforredo.Clear();
    }

    private void OnInputChange(ChangeEventArgs args)
    {
        generatePasswordDto.Length = Convert.ToInt32(args.Value);

        password = passwordGenerator.Generate(generatePasswordDto);

        CssColourClass = CssUtilities.GetCssColourClassForPasswords(generatePasswordDto.Length);

        passwordsforundo.Add(password);
        passwordsforredo.Clear();
    }



    private void ClearSavedPasswords()
    {
        savedPasswords.Clear();
    }



    private void Undo()
    {
        if (passwordsforundo is not null)
        {
            if (passwordsforundo.Count != 1)
            {
                var lastPassword = passwordsforundo.Last();

                passwordsforredo.Add(lastPassword);

                passwordsforundo.Remove(lastPassword);

                password = passwordsforundo.Last();
            }

            else if (passwordsforundo.Count == 0)
            {

                password = passwordsforundo.Last();

            }
        }

    }

    private void Redo()
    {
        if (passwordsforredo is not null)
        {
            if (passwordsforredo.Count != 1)
            {
                var redoPassword = passwordsforredo.Last();

                passwordsforundo.Add(redoPassword);

                passwordsforredo.Remove(redoPassword);

                password = passwordsforredo.Last();
            }

            else if (passwordsforredo.Count == 0)
            {
                
                password = passwordsforredo.Last();

            }
        }

    }
}





<style>
    body {
        background: #2f343c
    }

    #generatortitle {
        border-radius: 10px;
        background: url(https://i.pinimg.com/originals/4b/11/9d/4b119dddd405c7c1de0ba3d9277c8e81.jpg);
        background-size: cover;
        width: 100%;
        height: 80px;
        overflow: hidden;
        will-change: transform;
    }

    #savedpasswordstitle {
        border-radius: 10px;
        background: url(https://i.pinimg.com/originals/ba/44/f6/ba44f6e9fd6971526f2a17ff59db2e15.png);
        background-size: cover;
        width: 100%;
        height: 80px;
        overflow: hidden;
        will-change: transform;
    }

</style>

